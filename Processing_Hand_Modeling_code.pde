
/*------Proccessing Modeling code for the Motion Capture Glove------*/

import processing.serial.*;

Serial myPort;
float e = 0;
int xPos = 1;         
float prevYaw = 0; 
float yaw1 = 0;
float yaw2 = 0;
float yaw3 = 0;
float yaw4 = 0;
float prevPitch = 0;
float pitch1 = 0;
float pitch2 = 0;
float pitch3 = 0;
float pitch4 = 0;
float prevRoll = 0;
float roll1 = 0;
float roll2 = 0;
float roll3 = 0;
float roll4 = 0;
float inByte = 0;
float rotation = 0;
int index1;
int index2;
float movePitch1 = 0;
float movePitch2 = 0;
float xMove = 0;
float yMove = 0;
float zMove = 0;
int flex1 = 0;
int flex2 = 0;
int flex3 = 0;
int flex4 = 0;
int flex5 = 0;
int flex6 = 0;
int flex7 = 0;
int flex8 = 0;
int flex9 = 0;
int flex10 = 0;
int flex11 = 0;
int flex12 = 0;
int flex13 = 0;
int flex14 = 0;
float initalYawDiff2 = 0;
float initalPitchDiff2 = 0;
int prevX = 0;
int prevY = 0;
float pastE = 0;

void setup () {
  println(Serial.list());
  myPort = new Serial(this, Serial.list()[1], 250000);
  background(0);
  size(1000, 1000, P3D);
  noStroke();
  fill(255);
  rectMode(CENTER);
  initalYawDiff2 = roll2-roll1-flex9;
  initalPitchDiff2 = pitch2-pitch1;
}
void draw () {
  background(100);
  pushMatrix();
    translate(width/2, height/2,0);
    pointLight(255, 200, 200,  400, 400,  500);
    pointLight(200, 200, 255, -400, 400,  500);
    pointLight(255, 255, 255,    0,   0, -500);
    rotateY(radians(mouseX));
    rotateZ(radians(mouseY));
    rotateX(radians(pastE));
    prevY = mouseY;
    prevX = mouseX;
      rotateY(radians(yaw4));
      rotateZ(radians(roll4));
      rotateX(radians(pitch4));
      box(200,50,100);
    translate(100,-15,0);
    rotateY(radians(yaw1-yaw4));
    rotateZ(radians(roll1-roll4));
    rotateX(radians(pitch1-pitch4));

    beginShape();
      vertex(0,0,-60);
      vertex(0,30,-60);
      vertex(0,30,60);
      vertex(0,0,60);
    endShape();
    beginShape();
      vertex(0,30,60);
      vertex(0,0,60);
      vertex(181,0,76);
      vertex(181,30,76);
    endShape();
    beginShape();
      vertex(181,0,76);
      vertex(181,30,76);
      vertex(211,30,-5);
      vertex(211,0,-5);
    endShape();
    beginShape();
      vertex(211,30,-5);
      vertex(211,0,-5);
      vertex(211,0,-73);
      vertex(211,30,-73);
    endShape();
    beginShape();
      vertex(211,0,-73);
      vertex(211,30,-73);
      vertex(43,30,-82);
      vertex(43,0,-82);
    endShape();
    beginShape();
      vertex(43,30,-82);
      vertex(43,0,-82);
      vertex(0,0,-60);
      vertex(0,30,-60);
    endShape();
    beginShape();
      vertex(0,30,-60);
      vertex(0,30,60);
      vertex(0,30,60);
      vertex(181,30,76);
      vertex(181,30,76);
      vertex(211,30,-5);
      vertex(211,30,-5);
      vertex(211,30,-73);
      vertex(211,30,-73);
      vertex(43,30,-82);
      vertex(43,30,-82);
      vertex(0,30,-60);
    endShape();
    beginShape();
      vertex(0,0,-60);
      vertex(0,0,60);
      vertex(0,0,60);
      vertex(181,0,76);
      vertex(181,0,76);
      vertex(211,0,-5);
      vertex(211,0,-5);
      vertex(211,0,-73);
      vertex(211,0,-73);
      vertex(43,0,-82);
      vertex(43,0,-82);
      vertex(0,0,-60);
    endShape();
    
    pushMatrix();
      translate(211,15,-50);
      rotateZ(radians(flex3));
      rotateY(radians(10));
      box(10,20, 20);
      translate(41,0,0);
      box(72,30,30);
      translate(36,0,0);
      rotateZ(radians(flex5));
      box(10,20,20);
      translate(33,0,0);
      box(56,30,30);
      translate(28,0,0);
      rotateZ(radians(flex11));
      box(10,20,20);
      translate(27,0,0);
      box(44,30, 30);
    popMatrix();
    pushMatrix();
      translate(211,15,-5);
      rotateZ(radians(flex2));
      box(10,20, 20);
      translate(50,0,0);
      box(90,30,30);
      translate(45,0,0);
      rotateZ(radians(flex6));
      box(10,20,20);
      translate(34,0,0);
      box(58,30,30);
      translate(29,0,0);
      rotateZ(radians(flex12));
      box(10,20,20);
      translate(27,0,0);
      box(44,30, 30);
    popMatrix();
    pushMatrix();
      translate(197,15,33);
      rotateZ(radians(flex1));
      rotateY(radians(-7));
      box(10,20, 20);
      translate(46,0,0);
      box(82,30,30);
      translate(41,0,0);
      rotateZ(radians(flex7));
      box(10,20,20);
      translate(34,0,0);
      box(58,30,30);
      translate(29,0,0);
      rotateZ(radians(flex13));
      box(10,20,20);
      translate(27,0,0);
      box(44,30, 30);
    popMatrix();
    pushMatrix();
      translate(181,15,76);
      rotateZ(radians(flex4));
      rotateX(radians(-12));
      rotateY(radians(-20));
      box(10,20, 20);
      translate(32,0,0);
      box(56,30,30);
      translate(28,0,0);
      rotateZ(radians(flex8/1.5));
      box(10,25,25);
      translate(21,0,0);
      box(32,25,25);
      translate(16,0,0);
      rotateZ(radians(flex8/1.5));
      box(10,20,20);
      translate(21,0,0);
      box(32,25, 25);
    popMatrix();
      translate(33,30,-82);
      rotateX(radians(pitch3-pitch1));
      rotateY(radians(yaw2+19-yaw1));
      rotateZ(radians(roll3-roll1+15));
      box(10,20,20);
      translate(10,0,0);
      println(yaw2 + " - " +yaw1 + " = "+(yaw2-yaw1) + " ");
    //println(pitch1);
      box(10,20, 20);
      translate(44.5,0,0);
      box(79,30,30);
      translate(37,0,0);
      rotateX(radians(pitch2-pitch3));
      //rotateX(radians(20));
      //rotateY(radians(yaw2-yaw3));
      rotateZ(radians(roll2-roll3));
      box(10,20,20);
      translate(45,0,0);
      //box(30,20, 20);
      box(80,30, 30);
      translate(40,0,0);  
      rotateZ(radians(flex10));
      box(10,20,20);
      translate(32,0,0);
      box(54,30, 30);
  popMatrix();
}


void serialEvent (Serial myPort) {
  String inString = myPort.readStringUntil('\n');
  if (inString != null && inString.length()>8) {
    String temp[] = splitTokens(inString, " ");
    if(temp.length>16){
      yaw1 = float(temp[0]);
      pitch1 = float(temp[1]);
      roll1 = float(temp[2]);
      yaw2 = float(temp[3]);
      pitch2 = float(temp[4]);
      roll2 = float(temp[5]);
      yaw3 = float(temp[6]);
      pitch3 = float(temp[7]);
      roll3 = float(temp[8]);
      flex1 = int(temp[9]);
      flex2 = int(temp[10]);
      flex3 = int(temp[11]);
      flex4 = int(temp[12]);
      flex5 = int(temp[13]);
      flex6 = int(temp[14]);
      flex7 = int(temp[15]);
      flex8 = int(temp[16]);
      flex9 = int(temp[17]);
      flex10 = int(temp[18]);
      flex11 = int(temp[19]);
      flex12 = int(temp[20]);
      flex13 = int(temp[21]);
      yaw4 = float(temp[22]);
      pitch4 = float(temp[23]);
      roll4 = float(temp[24]);
    }
    else{
      println("no data detected");
    }
  }
}

void mouseWheel(MouseEvent event) {
  e = event.getCount();
  pastE+= e;
  //println(e);
}